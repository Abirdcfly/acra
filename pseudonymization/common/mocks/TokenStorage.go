// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import common "github.com/cossacklabs/acra/pseudonymization/common"
import mock "github.com/stretchr/testify/mock"

// TokenStorage is an autogenerated mock type for the TokenStorage type
type TokenStorage struct {
	mock.Mock
}

// Get provides a mock function with given fields: id, context
func (_m *TokenStorage) Get(id []byte, context common.TokenContext) ([]byte, error) {
	ret := _m.Called(id, context)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, common.TokenContext) []byte); ok {
		r0 = rf(id, context)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, common.TokenContext) error); ok {
		r1 = rf(id, context)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: id, context, data
func (_m *TokenStorage) Save(id []byte, context common.TokenContext, data []byte) error {
	ret := _m.Called(id, context, data)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, common.TokenContext, []byte) error); ok {
		r0 = rf(id, context, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VisitMetadata provides a mock function with given fields: cb
func (_m *TokenStorage) VisitMetadata(cb func(dataLength int, metadata common.TokenMetadata) (common.TokenAction, error)) error {
	ret := _m.Called(cb)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(dataLength int, metadata common.TokenMetadata) (common.TokenAction, error)) error); ok {
		r0 = rf(cb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
